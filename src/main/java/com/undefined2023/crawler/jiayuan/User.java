package com.undefined2023.crawler.jiayuan;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import com.undefined2023.base.JsoupUtil;

public class User {

	static final String HOMEPAGE_URL = "http://www.jiayuan.com/";

	private String id = "";
	private Document doc = null;

	public User(String id) {
		this.id = id;
		doc = JsoupUtil.urlToDoc(HOMEPAGE_URL + id);
	}

	public Document getDoc() {
		return doc;
	}

	public static void testCases() {
		// case 1: available
		tryAll("151517557");
		// case 2: nonexistent
		tryAll("171517557");
		// case 3: verifying (only temporary)
		tryAll("161846694");
		// case 4: blacklisted
		tryAll("161796694");
		// case 5: claimed
		tryAll("159221426");
	}

	private static void tryAll(String id) {
		User u = new User(id);
		System.out.println("available " + u.available());
		System.out.println("nonexistent " + u.nonexistent());
		System.out.println("verifying " + u.verifying());
		System.out.println("blacklisted " + u.blacklisted());
		System.out.println("claimed " + u.claimed());
		System.out.println("closed " + u.closed());
		System.out.println();
	}

	public boolean available() {
		try {
			String input = doc.getElementsByTag("h4")
					.select("span:contains(ID:)").get(0).toString();
			String regex = ".*\\d+.*";
			return Pattern.matches(regex, input);
		} catch (IndexOutOfBoundsException ioobe) {
			return false;
		}
	}

	// SPECIAL CASES

	public boolean nonexistent() {
		if (doc.select("dd:contains(不存在)").toString().equals(""))
			return false;
		else
			return true;
	}

	public boolean verifying() {
		if (doc.select("dd:contains(暂未通过审核)").toString().equals(""))
			return false;
		else
			return true;
	}

	public boolean blacklisted() {
		if (doc.select("dd:contains(加黑)").toString().equals(""))
			return false;
		else
			return true;
	}

	public boolean claimed() {
		if (doc.select("dd:contains(意中人)").toString().equals(""))
			return false;
		else
			return true;
	}

	public boolean closed() {
		if (doc.select("dd:contains(关闭)").toString().equals(""))
			return false;
		else
			return true;
	}

	// VISIBLE INFO

	public boolean female() {
		for (Element e : doc.getElementsByClass("member_name")) {
			if (!e.select("a")
					.get(0)
					.getElementsByAttributeValueEnding("href", "sex=f&f=search")
					.toString().equals("")) {
				return true;
			}
		}
		return false;
	}

	public String nickname() {
		Element e = doc.getElementsByClass("member_info_r yh").get(0);
		String h4tab = e.select("h4").outerHtml();
		String regex = "<h4>.+<span>";
		Pattern p = Pattern.compile(regex);
		Matcher m = p.matcher(h4tab);
		String nickname = "";
		if (m.find()) {
			nickname = m.group(0).trim();
			nickname = nickname.substring(4, nickname.length() - 6);
		}
		return nickname;
	}

	public boolean autogeneratedNickname() {
		String nickname = nickname();
		boolean de = false, zai = false;
		for (char c : nickname.toCharArray()) {
			if (c == "的".charAt(0))
				de = true;
			else if (c == "在".charAt(0))
				zai = true;
		}
		if (de == true && zai == true) {
			return true;
		} else
			return false;
	}

	public boolean hasPhoto() {
		for (Element e : doc.getElementsByClass("img_absolute")) {
			if (!e.getElementsByAttributeValueContaining("_src",
					"invite_f_bp.jpg").toString().equals("")
					|| !e.getElementsByAttributeValueEnding("_src",
							"invite_m_bp.jpg").toString().equals("")) {
				return false;
			}
		}
		return true;
	}

	public boolean online() {
		try {
			doc.select("div.on_line.yh").get(0);
			return true;
		} catch (IndexOutOfBoundsException ioobe) {
			return false;
		}
	}

	public int charmValue() {
		return Integer.parseInt(doc.getElementsByTag("h6").get(0).text());
	}

	public int plainCharmValue() {
		/*
		 * plain = total - gift value
		 */
		int total = this.charmValue();
		// get gift value
		String url = "http://www.jiayuan.com/more_gift.php?uid=" + this.id;
		Document docContainsGiftValue = JsoupUtil.urlToDoc(url);
		String giftHref = docContainsGiftValue.getElementsByClass("cur_a")
				.get(0).select("a").attr("href");
		docContainsGiftValue = JsoupUtil.urlToDoc(giftHref);
		Elements es = docContainsGiftValue.getElementsByClass("lw_list_pag");
		String regex = "\\d+";
		Pattern p = Pattern.compile(regex);
		int gifts = 0;
		for (Element e : es) {
			String currDesc = e.text();
			Matcher m = p.matcher(currDesc);
			if (m.find()) {
				gifts += Integer.parseInt(m.group(0));
			}
		}
		return total - gifts;
	}

	public boolean charmValueUnder(int v) {
		int charmValue = this.charmValue();
		if (charmValue < v)
			return true;
		else
			return false;
	}

	public String age() {
		return doc.getElementsByClass("member_name").get(0).text()
				.substring(0, 2);
	}

	public boolean ageUnder(int v) {
		int age = Integer.parseInt(this.age());
		if (age < v)
			return true;
		else
			return false;
	}

	public boolean unmarried() {
		String text = doc.getElementsByClass("member_name").get(0).ownText();
		if (text.contains("未婚"))
			return true;
		else
			return false;
	}

	public String city() {
		return doc.getElementsByClass("member_name").get(0).select("a").get(0)
				.text();
	}

	public boolean inBeijing() {
		if (this.city().equals("北京"))
			return true;
		else
			return false;
	}

	public boolean inHunan() {
		if (this.city().equals("湖南"))
			return true;
		else
			return false;
	}

	public String educationalBackground() {
		return doc.getElementsByTag("em").get(0).text();
	}

	public boolean lessEducated() {
		String eb = this.educationalBackground();
		if (eb.equals("高中中专及以下") || eb.equals("大专") || eb.equals("本科"))
			return true;
		else
			return false;
	}

	public String height() {
		return doc.getElementsByClass("fl pr").get(1).select("em").text()
				.replace("cm", "");
	}

	public boolean heightAbove(int v) {
		int height = Integer.parseInt(this.height());
		if (height > v)
			return true;
		else
			return false;
	}

	public boolean tallerThanMom() {
		if (Integer.parseInt(this.height()) > 164)
			return true;
		else
			return false;
	}

	public String origin() {
		Elements e = doc.getElementsByClass("js_list fn-clear").get(5)
				.select("em");
		return e.get(0).text();
	}

	public String residence() {
		Elements e = doc.getElementsByClass("js_list fn-clear").get(5)
				.select("em");
		return e.get(1).text();
	}

	public boolean rootNonbeijing() {
		if (this.origin().startsWith("北京") || this.residence().startsWith("北京"))
			return false;
		else
			return true;
	}

	public boolean matched() {
		if (this.female())
			if (this.hasPhoto())
				if (this.charmValueUnder(Conf.c))
					if (this.ageUnder(Conf.a))
						if (this.unmarried())
							if (this.inBeijing())
								if (this.lessEducated())
									if (this.tallerThanMom())
										if (this.rootNonbeijing())
											return true;
		return false;
	}

	// INVISIBLE INFO

	// public HashSet<String> handsomePhotosUrl() {
	// String myPhotoUrl = doc.select("#bigImg").first().select("td").first()
	// .select("a").first().absUrl("href");
	// // we need to login to access
	// return null;
	// }

	// charm value doesn't mean anything, try to get the fans number
	// public static void main(String[] args) {
	// User u = new User("151517557");
	// }
	//
	// public int fansNumber() {
	// Element e = doc.getElementById("bigImg").select("td").first()
	// .select("a").first();
	// String photoPageUrl = e.attr("href");
	// return 0;
	// }

	// public String lastLoginTime() {
	//
	// }

	// public boolean loggedInOverThePassedWeek() {
	//
	// }

	// public boolean noCar() {
	//
	// }

	// public boolean noHouse() {
	//
	// }

	// String salary() {
	// Pattern p = Pattern.compile("\\d{4, 5}~");
	// p.matcher(doc.getElementsByClass("fl pr").get(3).select("em").text());
	// return null;
	// }

	// public boolean salaryFrom2000To5000() {
	// if (this.salary().equals("2000~5000")) return true;
	// else return false;
	// }

	// public String matingAge() {
	//
	// }

	// public boolean acceptBoysYoungerThan30() {
	//
	// }
}
